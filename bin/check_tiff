#!/usr/bin/env python
from PIL import Image
from PIL.ExifTags import TAGS

import re
import sys
import os
import logging
import argparse

REQUIRED_TAGS = set([
    0x0131,  # Software
    # 0x000B,  # Processing software
    0x011A,  # XResolution
    0x011B,  # YResolution
    0x0103,  # Compression
    0xA001,  # Colorspace
    0x0132,  # Datetime
    0x8773,  # Colorprofile
    0x0131,  # Software
    0x0128,  # ResolutionUnit
    0x0100,  # ImageWidth
    0x0101,  # ImageLength
    0x0102,  # Bitsdepth,
    0xC68B,  # OriginalRawFileName
    0x0110,  # Model (scanner type)
    0x010F   # Make (scanner name)
])

OPTIONAL_TAGS = set([
    0x8827,  # Isospeed
    0x9201,  # Shuterspeed
    0x9202,  # Aperture
    0x920A,  # FocalLength (objective type)
    0xA434   # LensModel
])

logger = logging.getLogger(__name__)


def is_tif(filename: str, use_extension: bool = True):
    if use_extension:
        return re.match(r".*\.tif", filename) is not None
    else:
        with open(filename, 'rb') as f:
            r = f.read(4)
            return r == b'\x49\x49\x2A\x00' or r == b'\x4D\x4D\x00\x2A'


def contains_tif_files(filenames: list):
    count = 0
    for filename in filenames:
        if is_tif(filename):
            count += 1
    return count


def configure_logging(logfile: str, loglevel: int = logging.WARNING):
    handlers = []
    handlers.append(logging.StreamHandler(sys.stdout))
    handlers.append(logging.FileHandler(logfile, 'w'))
    logging.basicConfig(handlers=handlers, level=loglevel,
                        style='{', format="{asctime} | {levelname} | {name} | {module} | {message}")


def validate_tags(path: str, args: dict):
    with Image.open(path) as img:
        tags = img.tag
        tags = set(tags.keys())
        missing_tags = REQUIRED_TAGS - tags
        if args.enable_optional:
            missing_optional = OPTIONAL_TAGS - tags
            missing_tags |= missing_optional
        message = str()

        for tag in missing_tags:
            message = f"{message}\n{TAGS[tag]}"
        if missing_tags:
            logging.warning(f"Missing TAGS for image {path} :{message}")


def main(args: dict):
    data_path = args.data_path
    for dirpath, dirnames, filenames in os.walk(data_path):
        for filename in filenames:
            filename = os.path.join(dirpath, filename)
            if is_tif(filename):
                validate_tags(filename, args)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    required = parser.add_argument_group("required arguments")
    required.add_argument("-d", "--data-path", type=str, required=True, help="Directory to check")
    parser.add_argument("-e", "--enable-optional", action='store_true',
                        help="Enable checking of One-Shot systems metadata")
    parser.add_argument("-o", "--output-file", type=str, default="check_tiff.log",
                        help="Output summary file")
    args = parser.parse_args()

    configure_logging(args.output_file, logging.DEBUG)

    if not os.path.isdir(args.data_path):
        logger.critical(f"Data directory {args.data_path} doesn't exist. Aborting.")
        sys.exit(1)
    main(args)
